/*
  # Initial Schema Setup
  
  1. New Tables
    - `accounts`
      - `id` (bigint, primary key)
      - `business_name` (text, required)
      - `contact_name` (text)
      - `phone` (text)
      - `email` (text)
      - `address` (text)
      - `latitude` (double precision)
      - `longitude` (double precision)
      - `last_contact_date` (timestamptz)
      - `last_order_date` (timestamptz)
      - `notes` (text)
      - `account_type` (text, enum)
      - Timestamps (created_at, updated_at)
  
  2. Security
    - Enable RLS on accounts table
    - Add policies for authenticated users to perform CRUD operations
*/

-- Create accounts table
CREATE TABLE IF NOT EXISTS accounts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    business_name TEXT NOT NULL,
    contact_name TEXT,
    phone TEXT,
    email TEXT,
    address TEXT,
    latitude DOUBLE PRECISION,
    longitude DOUBLE PRECISION,
    last_contact_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_order_date TIMESTAMPTZ,
    notes TEXT,
    account_type TEXT CHECK (account_type IN ('active', 'prospect', 'inactive')),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER accounts_updated_at
    BEFORE UPDATE ON accounts
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at();

-- Enable RLS
ALTER TABLE accounts ENABLE ROW LEVEL SECURITY;

-- Create RLS Policies
CREATE POLICY "Enable read access for authenticated users"
    ON accounts FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Enable insert access for authenticated users"
    ON accounts FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Enable update access for authenticated users"
    ON accounts FOR UPDATE
    TO authenticated
    USING (true);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_accounts_business_name ON accounts(business_name);
CREATE INDEX IF NOT EXISTS idx_accounts_last_contact_date ON accounts(last_contact_date);
CREATE INDEX IF NOT EXISTS idx_accounts_account_type ON accounts(account_type);