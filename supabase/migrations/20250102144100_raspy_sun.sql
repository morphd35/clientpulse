/*
  # Create appointments table and related structures

  1. New Tables
    - `appointments`
      - `id` (bigint, primary key)
      - `account_id` (bigint, foreign key to accounts)
      - `user_id` (uuid, foreign key to auth.users)
      - `date` (timestamptz)
      - `duration` (integer, minutes)
      - `type` (text, enum)
      - `notes` (text)
      - `status` (text, enum)
      - `created_at` (timestamptz)
      - `updated_at` (timestamptz)

  2. Security
    - Enable RLS
    - Add policies for authenticated users
    - Create indexes for performance
*/

-- Create appointments table
CREATE TABLE appointments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_id BIGINT REFERENCES accounts(id) ON DELETE CASCADE,
    user_id UUID REFERENCES auth.users(id) NOT NULL,
    date TIMESTAMPTZ NOT NULL,
    duration INTEGER NOT NULL CHECK (duration >= 15),
    type TEXT NOT NULL CHECK (type IN ('sales', 'follow-up', 'introduction')),
    notes TEXT,
    status TEXT NOT NULL CHECK (status IN ('scheduled', 'completed', 'cancelled')) DEFAULT 'scheduled',
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- Create updated_at trigger
CREATE TRIGGER appointments_updated_at
    BEFORE UPDATE ON appointments
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at();

-- Enable RLS
ALTER TABLE appointments ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Users can read own appointments"
    ON appointments FOR SELECT
    TO authenticated
    USING (user_id = auth.uid());

CREATE POLICY "Users can insert own appointments"
    ON appointments FOR INSERT
    TO authenticated
    WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update own appointments"
    ON appointments FOR UPDATE
    TO authenticated
    USING (user_id = auth.uid());

CREATE POLICY "Users can delete own appointments"
    ON appointments FOR DELETE
    TO authenticated
    USING (user_id = auth.uid());

-- Create indexes
CREATE INDEX idx_appointments_user_id ON appointments(user_id);
CREATE INDEX idx_appointments_account_id ON appointments(account_id);
CREATE INDEX idx_appointments_date ON appointments(date);
CREATE INDEX idx_appointments_status ON appointments(status);